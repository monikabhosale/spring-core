The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.
A key element of Spring is infrastructural support at the application level: Spring focuses on the "plumbing" of enterprise applications so that teams 
can focus on application-level business logic, without unnecessary ties to specific deployment environments.


Features
Core technologies: dependency injection, events, resources, i18n, validation, data binding, type conversion, SpEL, AOP.

Testing: mock objects, TestContext framework, Spring MVC Test, WebTestClient.

Data Access: transactions, DAO support, JDBC, ORM, Marshalling XML.

Spring MVC and Spring WebFlux web frameworks.

Integration: remoting, JMS, JCA, JMX, email, tasks, scheduling, cache and observability.

Languages: Kotlin, Groovy, dynamic languages.
Spring Data JDBC, part of the larger Spring Data family, makes it easy to implement JDBC based repositories. This module deals with enhanced support for JDBC based data access layers. It makes it easier to build Spring powered applications that use data access technologies.

Features
Based on the aggregate abstraction
Annotation based entity mapping
Immutable entities
Query derivation
Custom queries via @Query annotations
MyBatis integration
Lifecycle callbacks
Auditing
**********************************************************************************************************
Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA-based (Java Persistence API) repositories. It makes it easier to build Spring-powered applications that use data access technologies.

Implementing a data access layer for an application can be quite cumbersome. 
Too much boilerplate code has to be written to execute the simplest queries. Add things like pagination, auditing, and other often-needed options, and you end up lost.

Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that’s actually needed.
 As a developer you write your repository interfaces using any number of techniques, and Spring will wire it up for you automatically. You can even 
use custom finders or query by example and Spring will write the query for you!

Support Policy and Migration
For information about minimum requirements, guidance on upgrading from earlier versions and support policies, please check out the official Spring Data release train wiki page.

Also check out the supported versions of Spring Data JPA in relation to Spring Boot.

Features
Getting Started: Sophisticated support to build repositories based on Spring and JPA

Various Query Methods: Pagination support, dynamic query execution, ability to integrate custom data access code

Validation of @Query annotated queries at bootstrap time

Support for Querydsl predicates and type-safe JPA queries

Auditing: Transparent auditing of domain class

Configuration: Modern configuration using annotations as well as legacy support for XML-based systems.
********************************************************************************************************************************
Spring Data for Spring LDAP is part of the umbrella Spring Data project which aims to provide a familiar and consistent Repository abstractions for new Spring LDAP.

The Spring Data LDAP project provides repository abstractions for Spring LDAP on top of Spring LDAP’s LdapTemplate and Object-Directory Mapping.

Configuration: Spring configuration support using Java-based @Configuration classes or an XML namespace.
Rich Object Mapping: Annotation based mapping metadata
Repositories: Automatic implementation of Repository interfaces including support for custom query methods.
Querydsl: Querydsl integration to support type-safe queries.
***********************************************************************************************************************************************
Spring Data for MongoDB is part of the umbrella Spring Data providing integration with the MongoDB document database, offering a familiar 
and consistent Spring based programming model while retaining store specific features and capabilities.

Features
MongoTemplate: Helper class that increases productivity for common tasks.
Object Mapping: Feature rich, annotation driven object mapper.
Lifecycle Events: Before and after save, update, delete hooks and events.
Data Repositories: Repository interfaces including support for custom queries & aggregations.
Multi Document Transactions: Managed transaction support for multi document modifications.
Encryption: Automatic and explicit client side field level encryption.
GridFS: Large file storage.
Querydsl: Type-safe query integration.
Kotlin: Extensions to enrich developer experience.
*****************************************************************************************************************
Spring Data Redis, part of the larger Spring Data portfolio, provides easy configuration and access to Redis from Spring applications. It offers both low-level and high-level abstractions for interacting with the store, freeing users from infrastructural concerns.

Features
Connection package as low-level abstraction across multiple Redis drivers (Lettuce and Jedis).

Exception translation to Spring’s portable Data Access exception hierarchy for Redis driver exceptions.

RedisTemplate that provides a high-level abstraction for performing various Redis operations, exception translation and serialization support.

Pubsub support (such as a MessageListenerContainer for message-driven POJOs).

Redis Sentinel and Redis Cluster support.

Reactive API using the Lettuce driver.

JDK, String, JSON and Spring Object/XML mapping serializers.

JDK Collection implementations on top of Redis.

Atomic counter support classes.

Sorting and Pipelining functionality.

Dedicated support for SORT, SORT/GET pattern and returned bulk values.

Redis implementation for Spring 3.1 cache abstraction.

Automatic implementation of Repository interfaces including support for custom query methods using @EnableRedisRepositories.

CDI support for repositories.
************************************************************************************************************************
Spring Data R2DBC, part of the larger Spring Data family, makes it easy to implement R2DBC based repositories. R2DBC stands for Reactive Relational Database Connectivity,
 a specification to integrate SQL databases using reactive drivers. Spring Data R2DBC applies familiar Spring abstractions and repository support for R2DBC. It makes it easier to build Spring-powered applications that use relational data access technologies in a reactive application stack.

Features
functional API
Template API via R2dbcEntityTemplate
Support for an array of different databases: H2, MariaDB, Microsoft SQL Server, MySQL, jasync-sql MySQL, Postgres and Oracle
Running statements for mapped entities using the Criteria API built on top of Spring Framework’s R2DBC DatabaseClient.
Parameter binding using the native syntax.
Result consumption: Update count, unmapped (Map<String, Object>), mapped to entities, extraction function.
Reactive repositories using @Query annotated methods.
Query derivation.

****************************************************************************************************************************
Spring Data REST is part of the umbrella Spring Data project and makes it easy to build hypermedia-driven REST web services on top of Spring Data repositories.

Spring Data REST builds on top of Spring Data repositories, analyzes your application’s domain model and exposes hypermedia-driven HTTP resources for 
aggregates contained in the model.

Features
Spring Data Repository REST Resources: Exposes a discoverable REST API for your domain model using HAL as media type based on Spring Data Repositories.
Pagination, Sortin, Dynamic Filtering: Supports pagination via navigational links.
Allows to dynamically filter collection resources.
Conditional Requests: Supports Conditional Operations using HTTP Headers.
Query Method Exporter: Exposes dedicated search resources for query methods defined in your repositories.
Lifecycle Event Hooks: Allows to hook into the handling of REST requests through Spring ApplicationEvents.
ALPS and JSON Schema Metadata: Provides metadata for discovery about the model.
Projections: Allows to define client specific representations through projections.
HAL Explorer: Ships a customized variant of the HAL Explorer to leverage the exposed metadata.
Advanced customizations: Allows customization of the default resources exposed and customization of Jackson.

**************************************************************************************************************************************************
The Apache Cassandra NoSQL Database offers many new capabilities for teams seeking a solution to handle high velocity, high volume and variable data flows. 
This new way of thinking introduces new concepts and a learning curve that can be intimidating to team members and team managers. Spring Data for Apache 
Cassandra offers a familiar interface to those who have used other Spring Data modules in the past.

The learning curve for developing applications with Apache Cassandra is significantly reduced when using Spring Data for Apache Cassandra. 
With the power to stay at a high level with annotated POJOs, or at a low level with high performance data ingestion capabilities,
 the Spring Data for Apache Cassandra templates are sure to meet every application need.

CassandraTemplate and CqlTemplate: Helper class that increases productivity for common tasks exposing synchronous, reactive, and asynchronous APIs.
Schema Support: Creation of Keyspaces, Tables, and Indices.
Object Mapping: Feature rich, annotation driven object mapper.
Lifecycle Events: Before and after save, update, delete hooks and events.
Repositories: Repository interfaces including support for custom queries & aggregations.
Observability: Metrics and distributed tracing.
Kotlin: Extensions to enrich developer experience.
****************************************************************************************************************************************
NOTICE
At the end of 2022, VMware announced the general availability of the Spring for VMware GemFire projects.

While these Spring based projects for VMware GemFire are open source and a succession to the Spring for Apache Geode projects, 
they are not a replacement. VMware GemFire forked from the Apache Geode project and is not open source.

It is not recommended to begin new projects using Spring for Apache Geode and rather transition to Spring for VMware GemFire,
 starting here. Alternatively, the Spring portfolio provides first-class integration with other comparable caching providers.

Finally, keep in mind, Spring for Apache Geode projects are still maintained until OSS and commercial support ends.
 Maintenance only includes CVE and critical fixes. No new features or enhancements will be made. Spring Data for Apache Geode’s 
support timelines can be viewed on the SUPPORT tab.
*************************************************************************************************************************************************************************
Overview
The primary goal of the Spring Data for Apache Geode project is to make it easier to build highly scalable Spring
 powered applications using Apache Geode for distributed data management.

Spring Data for Apache Geode brings the full power of the Spring Framework to your Apache Geode applications.

Features
XML namespace to configure and create Apache Geode resources declaratively with Spring

Annotation configuration model to quickly and easily get started with Apache Geode out-of-the-box

Simplifies working with Apache Geode APIs

Spring Cache Abstraction backed by Apache Geode

Spring Data Mapping infrastructure applied to POJOs stored in Apache Geode

Spring Data Repositories backed by Apache Geode

Apache Geode Cache Transactions through Spring’s Declarative Transaction Management

Additional support for using Apache Geode in Global, JTA Transactions through Spring’s Declarative Transaction Management

Enhanced support for Apache Geode Serialization

Annotations for Function Executions

Support for Continuous Query

Enhanced support for Apache Lucene Integration

Bootstrapping a Spring Context with Apache Geode

Spring Tool Suite Spring Project Templates for Apache Geode
**************************************************************************************************************************************
Spring Data for Couchbase is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model 
for new datastores while retaining store-specific features and capabilities.

The Spring Data Couchbase project provides integration with the Couchbase Server database. Key functional areas of Spring Data Couchbase are a
 POJO centric model for interacting with Couchbase Buckets and easily writing a Repository style data access layer.

Features
Spring configuration support using Java based @Configuration classes.
CouchbaseTemplate helper class that increases productivity performing common Couchbase operations. Includes integrated object mapping between documents and POJOs.
Exception translation into Spring’s portable Data Access Exception hierarchy.
Feature Rich Object Mapping integrated with Spring’s Conversion Service.
Annotation-based mapping metadata but extensible to support other metadata formats.
Automatic implementation of Repository interfaces including support for custom finder methods (backed by Couchbase’s query language, N1QL) and PagingAndSortingRepository.
For Couchbase server versions < 4.0, repositories can still be backed by Couchbase Views.
Support for geospatial and multidimensional querying (backed by Couchbase Spatial Views)
Can serve as the backend for @Cacheable support, to cache any objects you need for high performance access.

****************************************************************************************************************************************************
Spring Data for Elasticsearch is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model for 
for new datastores while retaining store-specific features and capabilities.

The Spring Data Elasticsearch project provides integration with the Elasticsearch search engine. Key functional areas of Spring Data Elasticsearch are
 a POJO centric model for interacting with a Elastichsearch Documents and easily writing a Repository style data access layer.

Clients: Connectivity and configuration of various HTTP Clients.
ElasticsearchTemplate and ReactiveElasticsearchTemplate: Helper classes that provide object mapping between ES index operations and POJOs.
Object Mapping: Feature rich, annotation driven object mapper.
Entity Callbacks: Before and after save, update, delete callbacks.
Data Repositories: Repository interfaces including support for custom queries.
Join-Types, Routing, Scripting: Integration with specific Elasticsearch features.
********************************************************************************************************************************************************
This project is an extension of the Spring Data JPA project to allow access to entity revisions managed by Hibernate Envers. 
The sources mostly originate from a contribution of Philipp Hügelmeyer @hygl.

As of version 3.0, this project has been merged into Spring Data JPA.
*******************************************************************************************************************************************************
Spring Data Neo4j, part of the larger Spring Data family, provides easy configuration and access to Neo4j Graph Databases from Spring applications.
 It offers three different levels of abstraction to access the store. The Neo4j client, the Neo4j Template, and the Neo4j Repositories. Spring Data Neo4j offers advanced features to map annotated entity classes to the Neo4j Graph Database. The template programming model is equivalent to other Spring templates and builds the basis for interaction with the graph and is also used for the Spring Data repository support. Spring Data Neo4j is a core part of the Spring Data project which aims to provide convenient data access for NoSQL databases.

Features
Different levels of abstraction based on the Neo4j Java driver.

Reactive and imperative operation mode.

Immutable mapping.

Neo4j Client for low-level abstraction.

Neo4j Template and Repositories for high-level abstraction.

Support for Spring’s Conversion Service

Custom query via @Query
************************************************************************************************************************************************










